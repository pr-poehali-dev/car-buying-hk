import json
import urllib.request
from typing import Dict, Any


def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Get Telegram Chat ID using bot token from query parameter
    Args: event with httpMethod and queryStringParameters
    Returns: HTML page with Chat IDs
    '''
    method: str = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    # Get bot token from query parameter
    params = event.get('queryStringParameters', {}) or {}
    bot_token = params.get('token', '')
    
    if not bot_token:
        html_response = """
<!DOCTYPE html>
<html>
<head>
    <title>ü§ñ –£–∑–Ω–∞—Ç—å Chat ID</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-width: 600px; margin: 0 auto; }
        input { width: 100%; padding: 12px; margin: 10px 0; border: 2px solid #ddd; border-radius: 6px; font-size: 16px; box-sizing: border-box; }
        button { background: #4CAF50; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 16px; width: 100%; }
        button:hover { background: #45a049; }
        .info { background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #2196F3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ –£–∑–Ω–∞—Ç—å Telegram Chat ID</h1>
        
        <div class="info">
            <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong>
            <ol>
                <li>–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–∏–∂–µ</li>
                <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ—Ç—É /start –≤ Telegram</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å Chat ID"</li>
            </ol>
        </div>
        
        <form method="GET">
            <label><strong>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</strong></label>
            <input type="text" name="token" placeholder="8395698194:AAHZhC9bBvq8TeYBRHaJJLS7P_keTU-o3Uc" required>
            <button type="submit">–ü–æ–ª—É—á–∏—Ç—å Chat ID</button>
        </form>
    </div>
</body>
</html>"""
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'text/html; charset=utf-8',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': html_response
        }
    
    try:
        # Get updates from Telegram
        telegram_url = f"https://api.telegram.org/bot{bot_token}/getUpdates"
        
        with urllib.request.urlopen(telegram_url) as response:
            result = response.read().decode('utf-8')
            telegram_data = json.loads(result)
        
        if not telegram_data.get('ok'):
            html_response = f"""
<!DOCTYPE html>
<html>
<head>
    <title>‚ùå –û—à–∏–±–∫–∞</title>
    <meta charset="utf-8">
    <style>body {{ font-family: Arial, sans-serif; margin: 40px; }}</style>
</head>
<body>
    <h1>‚ùå –û—à–∏–±–∫–∞ Telegram API</h1>
    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {telegram_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>
    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞</p>
    <p><a href="?">‚Üê –ù–∞–∑–∞–¥</a></p>
</body>
</html>"""
            return {
                'statusCode': 200,
                'headers': {'Content-Type': 'text/html; charset=utf-8'},
                'isBase64Encoded': False,
                'body': html_response
            }
        
        updates = telegram_data.get('result', [])
        chats = []
        
        # Extract unique chats
        seen_chats = set()
        for update in updates:
            if 'message' in update and 'chat' in update['message']:
                chat = update['message']['chat']
                chat_id = chat['id']
                
                if chat_id not in seen_chats:
                    seen_chats.add(chat_id)
                    chats.append({
                        'chat_id': chat_id,
                        'type': chat.get('type', 'unknown'),
                        'title': chat.get('title', ''),
                        'username': chat.get('username', ''),
                        'first_name': chat.get('first_name', ''),
                        'last_name': chat.get('last_name', '')
                    })
        
        # Format response as HTML
        if chats:
            html_response = """
<!DOCTYPE html>
<html>
<head>
    <title>‚úÖ Chat ID –Ω–∞–π–¥–µ–Ω!</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-width: 800px; margin: 0 auto; }
        .chat { background: #e8f5e9; padding: 20px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #4CAF50; }
        .chat-id { font-size: 28px; font-weight: bold; color: #2E7D32; margin-bottom: 10px; }
        .info { color: #555; margin: 5px 0; }
        .instruction { background: #fff3e0; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ff9800; }
        .copy-btn { background: #4CAF50; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px; font-size: 16px; }
        .copy-btn:hover { background: #45a049; }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ Telegram —á–∞—Ç—ã</h1>
"""
            for chat in chats:
                name = chat.get('first_name', '') + ' ' + chat.get('last_name', '')
                if chat.get('username'):
                    name = f"@{chat['username']}"
                elif chat.get('title'):
                    name = chat['title']
                
                html_response += f"""
        <div class="chat">
            <div class="chat-id">{chat['chat_id']} <button class="copy-btn" onclick="copyToClipboard('{chat['chat_id']}')">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button></div>
            <div class="info"><strong>–¢–∏–ø:</strong> {chat['type']}</div>
            <div class="info"><strong>–ò–º—è:</strong> {name.strip() if name.strip() else '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
        </div>
"""
            
            html_response += f"""
        <div class="instruction">
            <h3>üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
            <ol>
                <li><strong>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ Chat ID</strong> –≤—ã—à–µ (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")</li>
                <li><strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ</strong> –Æ—Ä–µ –≤ —á–∞—Ç</li>
                <li>–Æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ –ø—Ä–æ–µ–∫—Ç ‚Äî –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!</li>
            </ol>
            <p><strong>–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤:</strong> {len(chats)}</p>
        </div>
        
        <p><a href="?">‚Üê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω</a></p>
    </div>
    
    <script>
        function copyToClipboard(text) {{
            navigator.clipboard.writeText(text).then(function() {{
                alert('‚úÖ Chat ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + text);
            }});
        }}
    </script>
</body>
</html>"""
        else:
            html_response = """
<!DOCTYPE html>
<html>
<head>
    <title>‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-width: 600px; margin: 0 auto; }
        .warning { background: #fff3e0; padding: 20px; border-radius: 8px; border-left: 4px solid #ff9800; }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h1>
        <div class="warning">
            <h3>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</h3>
            <ol>
                <li><strong>–ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞</strong> –≤ Telegram (–ø–æ username)</li>
                <li><strong>–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É</strong> –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</li>
                <li><strong>–û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</strong> (F5)</li>
            </ol>
            <p>–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å!</p>
        </div>
        <p><a href="?">‚Üê –ù–∞–∑–∞–¥</a></p>
    </div>
</body>
</html>"""
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'text/html; charset=utf-8',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': html_response
        }
        
    except Exception as e:
        html_response = f"""
<!DOCTYPE html>
<html>
<head>
    <title>‚ùå –û—à–∏–±–∫–∞</title>
    <meta charset="utf-8">
    <style>body {{ font-family: Arial, sans-serif; margin: 40px; }}</style>
</head>
<body>
    <h1>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {str(e)}</p>
    <p><a href="?">‚Üê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a></p>
</body>
</html>"""
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'text/html; charset=utf-8'},
            'isBase64Encoded': False,
            'body': html_response
        }
